namespace com.teracloud.streamsx.stt.sample;

use com.teracloud.streamsx.stt::*;

/**
 * Simple Window Test - Uses count-based window with proper accumulation
 * 
 * The NeMoSTT operator accumulates audio chunks internally until WindowMarker
 */
composite SimpleWindowTest {
    graph
        // Audio source - reads from test file
        stream<blob audioChunk, uint64 audioTimestamp> AudioStream = FileAudioSource() {
            param
                filename: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/test_data/audio/librispeech-1995-1837-0001.wav";
                blockSize: 16384u;  // 1 second chunks
                sampleRate: 16000;
                bitsPerSample: 16;
                channelCount: 1;
        }
        
        // Debug: Show audio chunks
        () as AudioDebug = Custom(AudioStream) {
            logic
                state: {
                    mutable int32 chunkCount = 0;
                    mutable int32 totalBytes = 0;
                }
                onTuple AudioStream: {
                    chunkCount++;
                    totalBytes += size(audioChunk);
                    printStringLn("[Audio] Chunk " + (rstring)chunkCount + ": " + 
                                 (rstring)size(audioChunk) + " bytes (total: " + 
                                 (rstring)totalBytes + " bytes)");
                }
                onPunct AudioStream: {
                    printStringLn("[Audio] Punctuation: " + (rstring)currentPunct());
                }
        }
        
        // Use count-based window to send audio chunks regularly
        // The window just passes through chunks and adds WindowMarker punctuation
        stream<blob audioChunk, uint64 audioTimestamp> WindowedAudio = 
            Aggregate(AudioStream) {
                window
                    AudioStream: tumbling, count(5);  // Every 5 chunks
                param
                    groupBy: audioTimestamp;  // Group by timestamp to keep all tuples
                output
                    WindowedAudio: 
                        audioChunk = Any(audioChunk),
                        audioTimestamp = Any(audioTimestamp);
            }
        
        // Debug windowed stream
        () as WindowDebug = Custom(WindowedAudio) {
            logic
                state: {
                    mutable int32 tupleCount = 0;
                }
                onTuple WindowedAudio: {
                    tupleCount++;
                    printStringLn("[Window] Tuple " + (rstring)tupleCount + 
                                 ": " + (rstring)size(audioChunk) + " bytes");
                }
                onPunct WindowedAudio: {
                    printStringLn("[Window] Punctuation: " + (rstring)currentPunct());
                }
        }
        
        // NeMo speech recognition - accumulates audio internally until WindowMarker
        stream<rstring transcription> Transcription = NeMoSTT(WindowedAudio) {
            param
                modelPath: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/models/nemo_fastconformer_streaming/stt_en_conformer_ctc_small.onnx";
                tokensPath: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/models/fastconformer_ctc_export/tokens_with_ids.txt";
        }
        
        // Display transcription results
        () as Display = Custom(Transcription) {
            logic
                state: {
                    mutable int32 transcriptionCount = 0;
                }
                onTuple Transcription: {
                    transcriptionCount++;
                    printStringLn("=========================================");
                    printStringLn("âœ… TRANSCRIPTION #" + (rstring)transcriptionCount + ":");
                    printStringLn(transcription);
                    printStringLn("=========================================");
                }
                onPunct Transcription: {
                    printStringLn("[Transcription] Punctuation: " + (rstring)currentPunct());
                }
        }
        
        // Save transcription to file
        () as FileWriter = FileSink(Transcription) {
            param
                file: "SimpleWindowTest_transcript_" + (rstring)getTimestampInSecs() + ".txt";
                format: txt;
        }
}