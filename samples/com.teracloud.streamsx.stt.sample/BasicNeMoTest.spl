namespace com.teracloud.streamsx.stt.sample;

use com.teracloud.streamsx.stt::*;

/**
 * Basic NeMo CTC Speech-to-Text Test
 * 
 * Simple demonstration of the working NeMo FastConformer implementation.
 * Expected output: "it was the first great song of his life..."
 */
composite BasicNeMoTest {
    graph
        // Simple audio source - reads from test file
        stream<blob audioChunk, uint64 audioTimestamp> AudioStream = FileAudioSource() {
            param
                filename: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/test_data/audio/librispeech-1995-1837-0001.wav";
                blockSize: 16384u;  // 1 second chunks
                sampleRate: 16000;
                bitsPerSample: 16;
                channelCount: 1;
        }
        
        // NeMo speech recognition with minimal configuration
        stream<rstring transcription> Transcription = NeMoSTT(AudioStream) {
            param
                modelPath: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/models/fastconformer_nemo_export/ctc_model.onnx";
                tokensPath: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/models/fastconformer_nemo_export/tokens.txt";
        }
        
        // Display results and save to file
        () as Display = Custom(Transcription) {
            logic
                onTuple Transcription: {
                    printStringLn("BasicNeMoTest Transcription: " + transcription);
                }
        }
        
        // Save transcription to distinctly named file
        () as FileWriter = FileSink(Transcription) {
            param
                file: "BasicNeMoTest_transcript_" + (rstring)getTimestampInSecs() + ".txt";
                format: txt;
        }
}