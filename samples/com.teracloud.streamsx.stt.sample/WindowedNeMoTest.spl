namespace com.teracloud.streamsx.stt.sample;

use com.teracloud.streamsx.stt::*;

/**
 * Windowed NeMo Test - Fixes the punctuation issue
 * 
 * This sample adds a tumbling window to trigger transcription every 5 seconds.
 * The NeMoSTT operator waits for WindowMarker punctuation to transcribe accumulated audio.
 */
composite WindowedNeMoTest {
    graph
        // Audio source - reads from test file
        stream<blob audioChunk, uint64 audioTimestamp> AudioStream = FileAudioSource() {
            param
                filename: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/test_data/audio/librispeech-1995-1837-0001.wav";
                blockSize: 16384u;  // 1 second chunks
                sampleRate: 16000;
                bitsPerSample: 16;
                channelCount: 1;
        }
        
        // Debug: Show audio chunks
        () as AudioDebug = Custom(AudioStream) {
            logic
                state: {
                    mutable int32 chunkCount = 0;
                }
                onTuple AudioStream: {
                    chunkCount++;
                    if (chunkCount == 1 || chunkCount % 5 == 0) {
                        printStringLn("Audio chunk " + (rstring)chunkCount + ": " + 
                                     (rstring)size(audioChunk) + " bytes at timestamp " + 
                                     (rstring)audioTimestamp);
                    }
                }
        }
        
        // Add tumbling window to trigger transcription every 5 seconds
        stream<blob audioChunk, uint64 audioTimestamp> WindowedAudio = 
            Aggregate(AudioStream) {
                window
                    AudioStream: tumbling, time(5);  // 5 second windows
                output
                    WindowedAudio: 
                        audioChunk = Last(audioChunk),
                        audioTimestamp = Last(audioTimestamp);
            }
        
        // NeMo speech recognition
        stream<rstring transcription> Transcription = NeMoSTT(WindowedAudio) {
            param
                modelPath: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/models/fastconformer_ctc_export/model.onnx";
                tokensPath: "/homes/jsharpe/teracloud/toolkits/com.teracloud.streamsx.stt/models/fastconformer_ctc_export/tokens_with_ids.txt";
        }
        
        // Display transcription results
        () as Display = Custom(Transcription) {
            logic
                state: {
                    mutable int32 transcriptionCount = 0;
                }
                onTuple Transcription: {
                    transcriptionCount++;
                    printStringLn("=========================================");
                    printStringLn("âœ… TRANSCRIPTION #" + (rstring)transcriptionCount + ":");
                    printStringLn(transcription);
                    printStringLn("=========================================");
                }
        }
        
        // Save transcription to file
        () as FileWriter = FileSink(Transcription) {
            param
                file: "WindowedNeMoTest_transcript_" + (rstring)getTimestampInSecs() + ".txt";
                format: txt;
        }
}