
package AudioChannelSplitter_h;
use strict; use Cwd 'realpath';  use File::Basename;  use lib dirname(__FILE__);  use SPL::Operator::Instance::OperatorInstance; use SPL::Operator::Instance::Annotation; use SPL::Operator::Instance::Context; use SPL::Operator::Instance::Expression; use SPL::Operator::Instance::ExpressionTree; use SPL::Operator::Instance::ExpressionTreeEvaluator; use SPL::Operator::Instance::ExpressionTreeVisitor; use SPL::Operator::Instance::ExpressionTreeCppGenVisitor; use SPL::Operator::Instance::InputAttribute; use SPL::Operator::Instance::InputPort; use SPL::Operator::Instance::OutputAttribute; use SPL::Operator::Instance::OutputPort; use SPL::Operator::Instance::Parameter; use SPL::Operator::Instance::StateVariable; use SPL::Operator::Instance::TupleValue; use SPL::Operator::Instance::Window; 
sub main::generate($$) {
   my ($xml, $signature) = @_;  
   print "// $$signature\n";
   my $model = SPL::Operator::Instance::OperatorInstance->new($$xml);
   unshift @INC, dirname ($model->getContext()->getOperatorDirectory()) . "/../impl/nl/include";
   $SPL::CodeGenHelper::verboseMode = $model->getContext()->isVerboseModeOn();
       # Get operator parameters
       my $stereoFormat = $model->getParameterByName("stereoFormat");
       my $encoding = $model->getParameterByName("encoding");
       my $leftChannelRole = $model->getParameterByName("leftChannelRole");
       my $rightChannelRole = $model->getParameterByName("rightChannelRole");
       my $sampleRate = $model->getParameterByName("sampleRate");
       my $targetSampleRate = $model->getParameterByName("targetSampleRate");
   print "\n";
   print "\n";
   print '/* Additional includes for AudioChannelSplitter operator */', "\n";
   print '#include <StereoAudioSplitter.hpp>', "\n";
   print '#include <memory>', "\n";
   print '#include <vector>', "\n";
   print '#include <string>', "\n";
   print "\n";
   SPL::CodeGen::headerPrologue($model);
   print "\n";
   print "\n";
   print 'class MY_OPERATOR : public MY_BASE_OPERATOR ', "\n";
   print '{', "\n";
   print 'public:', "\n";
   print '    MY_OPERATOR();', "\n";
   print '    virtual ~MY_OPERATOR();', "\n";
   print '    ', "\n";
   print '    void allPortsReady();', "\n";
   print '    void prepareToShutdown();', "\n";
   print '    ', "\n";
   print '    void process(Tuple const & tuple, uint32_t port);', "\n";
   print '    void process(Punctuation const & punct, uint32_t port);', "\n";
   print '    ', "\n";
   print 'private:', "\n";
   print '    // Operator parameters', "\n";
   print '    std::string leftChannelRole_;', "\n";
   print '    std::string rightChannelRole_;', "\n";
   print '    std::string stereoFormat_;', "\n";
   print '    std::string encoding_;', "\n";
   print '    int32_t sampleRate_;', "\n";
   print '    int32_t targetSampleRate_;', "\n";
   print '    ', "\n";
   print '    // Processing state', "\n";
   print '    uint64_t tuplesProcessed_;', "\n";
   print '    uint64_t bytesProcessed_;', "\n";
   print '    ', "\n";
   print '    // Helper methods', "\n";
   print '    void processStereoAudioBlob(const SPL::blob& audioData, uint64_t audioTimestamp);', "\n";
   print '    void outputChannelData(const std::vector<float>& channelData, ', "\n";
   print '                          const std::string& channelRole,', "\n";
   print '                          int32_t channelNumber,', "\n";
   print '                          uint64_t audioTimestamp,', "\n";
   print '                          uint32_t outputPort);', "\n";
   print '    ', "\n";
   print '    // Convert float samples back to blob for output', "\n";
   print '    SPL::blob floatVectorToBlob(const std::vector<float>& samples, ', "\n";
   print '                                const std::string& encoding);', "\n";
   print '};', "\n";
   print "\n";
   SPL::CodeGen::headerEpilogue($model);
   print "\n";
   CORE::exit $SPL::CodeGen::USER_ERROR if ($SPL::CodeGen::sawError);
}
1;
