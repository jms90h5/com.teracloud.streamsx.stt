namespace com.teracloud.streamsx.stt;

use com.teracloud.streamsx.stt::*;

/**
 * Reads stereo audio files and outputs separate channel streams.
 * This composite operator combines FileSource with AudioChannelSplitter
 * to provide a convenient way to process stereo audio files.
 * 
 * The operator reads audio files in chunks and splits them into
 * left and right channels, with configurable channel roles and
 * optional resampling.
 * 
 * @input none
 * @output LeftChannel Stream containing left channel audio with metadata
 * @output RightChannel Stream containing right channel audio with metadata
 * 
 * @param filename Path to the stereo audio file (required)
 * @param blockSize Size of audio chunks to read in bytes (default: 16000)
 * @param leftChannelRole Semantic role for left channel (default: "caller")
 * @param rightChannelRole Semantic role for right channel (default: "agent")
 * @param encoding Audio encoding format (default: pcm16)
 * @param sampleRate Sample rate of the input audio (default: 8000)
 * @param targetSampleRate Target sample rate for resampling, 0=no resampling (default: 0)
 */
public composite StereoFileAudioSource(output stream<ChannelAudioStream> LeftChannel,
                                             stream<ChannelAudioStream> RightChannel) {
    param
        expression<rstring> $filename;
        expression<uint32> $blockSize: 16000u;  // 1 second at 8kHz stereo 16-bit
        expression<rstring> $leftChannelRole: "caller";
        expression<rstring> $rightChannelRole: "agent";
        expression<AudioFormat> $encoding: pcm16;
        expression<int32> $sampleRate: 8000;
        expression<int32> $targetSampleRate: 0;
        
    graph
        // Read stereo audio file as binary blocks
        stream<blob audioData> RawAudioBlocks = FileSource() {
            param
                file: $filename;
                format: block;
                blockSize: $blockSize;
                initDelay: 0.0;
        }
        
        // Add block numbers for timestamp calculation
        stream<blob audioData, uint64 blockNumber> NumberedBlocks = Custom(RawAudioBlocks) {
            logic
                state: {
                    mutable uint64 blockCount = 0ul;
                }
                onTuple RawAudioBlocks: {
                    submit({
                        audioData = audioData,
                        blockNumber = blockCount++
                    }, NumberedBlocks);
                }
        }
        
        // Calculate timestamps based on block number and size
        stream<blob audioData, uint64 audioTimestamp> TimestampedAudio = Functor(NumberedBlocks) {
            output
                TimestampedAudio: 
                    audioData = audioData,
                    // Calculate audioTimestamp in ms based on block position
                    // blockSize bytes / (channels * bytes_per_sample) = samples_per_channel
                    // samples_per_channel / sample_rate = seconds
                    // seconds * 1000 = milliseconds
                    audioTimestamp = (blockNumber * (uint64)$blockSize * 1000ul) / 
                               (2ul * 2ul * (uint64)$sampleRate);  // 2 channels, 2 bytes/sample for PCM16
        }
        
        // Split stereo audio into separate channels
        (stream<ChannelAudioStream> LeftChannel;
         stream<ChannelAudioStream> RightChannel) = AudioChannelSplitter(TimestampedAudio) {
            param
                stereoFormat: interleaved;
                encoding: pcm16;  // TODO: map from AudioFormat to AudioEncoding
                leftChannelRole: $leftChannelRole;
                rightChannelRole: $rightChannelRole;
                sampleRate: $sampleRate;
                targetSampleRate: $targetSampleRate;
        }
}